def simpson(limI: Int, limS: Int, f: Double => Double) = (limS - limI)*(((f(limI) + 4*(f((limS + limI)/ 2)) + f(limS)))/6)

def simpsonCompuesta(limI: Int, limS: Int, n: Int, f: Double => Double) = {
        val x = (j: Double) => (limI + (((limS - (limI * 1.0))/ n) * j))
        (((limS - limI * 1.0)/ n)/3)* ((1 to n/2).map(i => (f(x(2 * i - 2)) + 4 * f(x(2 * i - 1)) + f(x(2 * i))))).sum
    }

def simpsonExtendida(limI: Int, limS: Int, n: Int, f: Double => Double) = {
        val h = ((limS - limI * 1.0)/n)
        (h/3)*(f(limI) + 4 * ((1 to n - 1 by 2).map(i => (f(limI + i * h)))).sum + 2 * ((2 to n - 2 by 2).map(i => (f(limI + i * h)))).sum + f(limS))
    }

@main def app(): Unit => {
	val funcion = (x: Double) => 3 * ( x * x)
        println(simpson(0 , 2, funcion))
        println()
        println(simpsonCompuesta(0 , 2, 20,funcion))
        println()
        println(simpsonExtendida(0 , 2, 20,funcion))
}
   